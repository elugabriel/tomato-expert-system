# -*- coding: utf-8 -*-
"""Convolution Neural Network.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t3v5s_EcRNLRIKXoHI1EZEtqrZF8QTnp
"""

#for processing the image
import cv2
import os
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
import string
import pandas as pd
#for building the model
from sklearn.model_selection import train_test_split
from tensorflow import keras
from tensorflow.keras import models,layers
from keras.utils import to_categorical

import warnings
# Ignore all warnings
warnings.filterwarnings('ignore')

df='C:/Users/user/Documents/tomato/tomato/train'

# Directory containing folders with images
root_dir = 'C:/Users/user/Documents/tomato/tomato/train'

# Dictionary to store counts for each folder
folder_counts = {}

# Iterate through each folder in the root directory
for folder in os.listdir(root_dir):
    folder_path = os.path.join(root_dir, folder)
    # Check if the item is a directory
    if os.path.isdir(folder_path):
        # Count the number of image files in the folder
        num_images = len([name for name in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, name)) and name.lower().endswith(('.png', '.jpg', '.jpeg'))])
        folder_counts[folder] = num_images

# Extract folder names and corresponding counts
folders = list(folder_counts.keys())
counts = list(folder_counts.values())

# Plotting the bar graph
plt.figure(figsize=(10, 6))
plt.bar(range(len(folders)), counts, align='center', alpha=0.7)
plt.xticks(range(len(folders)), folders, rotation=45)
plt.xlabel('Folders')
plt.ylabel('Number of Images')
plt.title('Number of Images per Folder')
plt.tight_layout()
plt.show()

Bacterial = os.listdir(os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Bacterial_spot'))

Early_blight = os.listdir(os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Early_blight'))

Late_blight = os.listdir(os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Late_blight'))


Leaf_Mold = os.listdir(os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Leaf_Mold'))

Septoria_leaf_spot= os.listdir(os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Septoria_leaf_spot'))

Spider_mites = os.listdir(os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Spider_mites Two-spotted_spider_mite'))


Target_Spot = os.listdir(os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Target_Spot'))

Tomato_Yellow_Leaf = os.listdir(os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Tomato_Yellow_Leaf_Curl_Virus'))

Tomato_mosaic_viru = os.listdir(os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Tomato_mosaic_virus'))


healthy = os.listdir(os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___healthy'))

X=[] #holding data
Y=[] #label

#Resizing and turning the images into numpy method
for i, image_name in enumerate(Bacterial):
    file_path = os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Bacterial_spot', image_name)
    image = Image.open(file_path)
    image = image.resize((64, 64), resample=Image.BOX)
    X.append(np.array(image))
    Y.append(0)

#Resizing and turning the images into numpy method
for i, image_name in enumerate(Early_blight):
    file_path = os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Early_blight', image_name)
    image = Image.open(file_path)
    image = image.resize((64, 64), resample=Image.BOX)
    X.append(np.array(image))
    Y.append(1)

#Resizing and turning the images into numpy method
for i, image_name in enumerate(Late_blight):
    file_path = os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Late_blight', image_name)
    image = Image.open(file_path)
    image = image.resize((64, 64), resample=Image.BOX)
    X.append(np.array(image))
    Y.append(2)

#Resizing and turning the images into numpy method
for i, image_name in enumerate(Leaf_Mold):
    file_path = os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Leaf_Mold', image_name)
    image = Image.open(file_path)
    image = image.resize((64, 64), resample=Image.BOX)
    X.append(np.array(image))
    Y.append(3)

#Resizing and turning the images into numpy method
for i, image_name in enumerate(Septoria_leaf_spot):
    file_path = os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Septoria_leaf_spot', image_name)
    image = Image.open(file_path)
    image = image.resize((64, 64), resample=Image.BOX)
    X.append(np.array(image))
    Y.append(4)

#Resizing and turning the images into numpy method
for i, image_name in enumerate(Spider_mites):
    file_path = os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Spider_mites Two-spotted_spider_mite', image_name)
    image = Image.open(file_path)
    image = image.resize((64, 64), resample=Image.BOX)
    X.append(np.array(image))
    Y.append(5)

#Resizing and turning the images into numpy method
for i, image_name in enumerate(Target_Spot):
    file_path = os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Target_Spot', image_name)
    image = Image.open(file_path)
    image = image.resize((64, 64), resample=Image.BOX)
    X.append(np.array(image))
    Y.append(6)

#Resizing and turning the images into numpy method
for i, image_name in enumerate(Tomato_Yellow_Leaf):
    file_path = os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Tomato_Yellow_Leaf_Curl_Virus', image_name)
    image = Image.open(file_path)
    image = image.resize((64, 64), resample=Image.BOX)
    X.append(np.array(image))
    Y.append(7)

#Resizing and turning the images into numpy method
for i, image_name in enumerate(Tomato_mosaic_viru):
    file_path = os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___Tomato_mosaic_virus', image_name)
    image = Image.open(file_path)
    image = image.resize((64, 64), resample=Image.BOX)
    X.append(np.array(image))
    Y.append(8)

#Resizing and turning the images into numpy method
for i, image_name in enumerate(healthy):
    file_path = os.path.join(df, 'C:/Users/user/Documents/tomato/tomato/train/Tomato___healthy', image_name)
    image = Image.open(file_path)
    image = image.resize((64, 64), resample=Image.BOX)
    X.append(np.array(image))
    Y.append(9)

X[1]

#X[5] is a NumPy array representing an image
image_array = X[5]

# Display the image
plt.imshow(image_array)
plt.show()

#seeing the length of Y
len(Y)

#seeing the length of X
len(X)

# turning Y to np array
Y = np.array(Y)

#getting the shape of Y
Y.shape

# turning X to np array
X= np.array(X)

X.shape

# Split the dataset for training and testing
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

#shape of x_train & y_train
#we will see the number of images will do training(8000) and the size(64,64) and the channels(RGB)
print(x_train.shape)
print(y_train.shape)

#shape of x_test & y_test
#we will see the number of images will do testing(2000) and the size(64,64) and the channels(RGB)
print(x_test.shape)
print(y_test.shape)

# Find the unique classes in y_test
unique_classes_test = np.unique(y_test)
print("Unique classes in y_test:", unique_classes_test)

# Convert y_train and y_test to one-hot encoded format
y_train = to_categorical(y_train , num_classes=10)
y_test = to_categorical(y_test , num_classes=10)

y_train[:5]

# Model CNN


import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Activation, Dropout

# Define the number of classes
num_classes = 10

# Define a sequential model
model = Sequential()

# Layer 1
model.add(Conv2D(32, (3,3), padding='same', input_shape=(64, 64, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

# Layer 2
model.add(Conv2D(32, (3,3), padding='same'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

# Layer 3
model.add(Conv2D(64, (3,3), padding='same'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

# Layer 4
model.add(Conv2D(32, (3,3), padding='same', input_shape=(64, 64, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

# Layer 5
model.add(Conv2D(32, (3,3), padding='same'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

# Layer 6
model.add(Conv2D(64, (3,3), padding='same'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


# Flatten layer to convert the 3D feature maps to 1D
model.add(Flatten())

# Dense layer with 64 neurons and ReLU activation
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))

# Output layer with the number of neurons equal to the number of classes and softmax activation for multi-class classification
model.add(Dense(num_classes))
model.add(Activation('softmax'))

# Compile the model with categorical crossentropy loss, Adam optimizer, and accuracy metric
model.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])

# Train the model on the training data
batch_size = 32  # Define your batch size
history=model.fit(x_train, y_train, batch_size=batch_size, verbose=1, epochs=20, validation_data=(x_test, y_test), shuffle=False)

# Save the trained model to a file
model.save('Tomato_leaf_disease_detection_classification.h5')

# Evaluate the model on the test data
loss, accuracy = model.evaluate(x_test, y_test, verbose=0)

# Print the model's performance
print(f'Test Loss: {loss:.4f}')
print(f'Test Accuracy: {accuracy*100:.2f}%')

from sklearn.metrics import classification_report, confusion_matrix

# Convert one-hot encoded y_test back to categorical labels
y_test_labels = np.argmax(y_test, axis=1)

# Get the model predictions on the test data
y_pred = np.argmax(model.predict(x_test), axis=1)

# Print the classification report
print("Classification Report:")
print(classification_report(y_test_labels, y_pred))

# Print the confusion matrix
print("Confusion Matrix:")
print(confusion_matrix(y_test_labels, y_pred))

# Plotting training and testing accuracy
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Testing Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Training and Testing Accuracy')
plt.legend()
plt.show()

# Plot the training and testing loss
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Testing Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training and Testing Loss')
plt.legend()
plt.show()

import seaborn as sns

# Compute confusion matrix
conf_matrix = confusion_matrix(y_test_labels, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 8))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()

#Comparison of Actual and Predicted Emotions for CNN
model = tf.keras.models.load_model('Tomato_leaf_disease_detection_classification.h5')

# Predict labels using the CNN model
predicted_probabilities = model.predict(x_test)
predicted_labels = np.argmax(predicted_probabilities, axis=1)

# Convert the NumPy array of predicted labels to a pandas Series
predicted_series = pd.Series(predicted_labels)

# Get value counts of actual labels
actual_counts = np.argmax(y_test, axis=1)
actual_counts = pd.Series(actual_counts).value_counts()

# Get value counts of predicted labels
predicted_counts = predicted_series.value_counts()

# Create a bar plot
plt.figure(figsize=(10, 5))

# Define disease labels
disease_labels = ['Bacterial_spot', 'Early_blight', 'Late_blight', 'Leaf_Mold',
                  'Septoria_leaf_spot', 'Spider_mites Two-spotted_spider_mite',
                  'Target_Spot', 'Tomato_Yellow_Leaf_Curl_Virus', 'Tomato_mosaic_virus',
                  'healthy']

# Plot actual labels
actual_counts.index = [disease_labels[label] for label in actual_counts.index]
actual_counts.plot(kind='bar', color='blue', width=0.3, position=1, label='Actual Labels')

# Plot predicted labels
predicted_counts.index = [disease_labels[label] for label in predicted_counts.index]
predicted_counts.plot(kind='bar', color='red', width=0.3, position=0, label='Predicted Labels')

#let's try CNN on sample of Test
# Load the trained model
model = tf.keras.models.load_model('Tomato_leaf_disease_detection_classification.h5')

# Assuming x_test and y_test are your test data
for i in range(5):
    # Get the ith image and its actual label
    current_image = x_test[i]
    actual_label = y_test[i]

    # Display the image
    plt.imshow(current_image)
    plt.axis('off')
    plt.show()

    # Get the model's prediction for the current image
    batch_prediction = model.predict(np.expand_dims(current_image, axis=0))
    predicted_label = np.argmax(batch_prediction)

    # Define disease labels
    disease_labels = ['Bacterial_spot', 'Early_blight', 'Late_blight', 'Leaf_Mold',
                      'Septoria_leaf_spot', 'Spider_mites_Two-spotted_spider_mite',
                      'Target_Spot', 'Tomato_Yellow_Leaf_Curl_Virus', 'Tomato_mosaic_virus',
                      'Healthy']

    # Map predicted label to class name
    predicted_class = disease_labels[predicted_label]

    # Map actual label to class name
    actual_class = disease_labels[np.argmax(actual_label)]

    # Print actual and predicted classes
    print("Actual class:", actual_class)
    print("Predicted class:", predicted_class)

